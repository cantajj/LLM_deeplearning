{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMw5F0EMXBBdBZaWvMhJaGZ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 16-03 셀프 어텐션을 이용한 텍스트 분류(Multi-head Self Attention for Text Classification)\n","---"],"metadata":{"id":"Oj_QCFGXeJ9s"}},{"cell_type":"markdown","source":["트랜스포머는 RNN 계열의 seq2seq를 대체하기 위해서 등장했습니다. 그리고 트랜스포머의 인코더는 RNN 인코더를, 트랜스포머의 디코더는 RNN 디코더를 대체할 수 있었습니다.\n","\n","트랜스포머의 인코더는 셀프 어텐션이라는 메커니즘을 통해 문장을 이해합니다. RNN과 그 동작 방식은 다르지만, RNN이 텍스트 분류나 개체명 인식과 같은 다양한 자연어 처리 태스크에 쓰일 수 있다면 트랜스포머의 인코더 또한 가능할 것입니다.\n","\n","실제로 트랜스포머의 인코더는 다양한 분야의 자연어 처리 태스크에서 사용될 수 있었고, 이 아이디어는 후에 배우게 될 BERT라는 모델로 이어지게 됩니다. 이번 챕터에서는 트랜스포머의 인코더를 사용하여 텍스트 분류를 수행합니다."],"metadata":{"id":"t91I28XheJU5"}},{"cell_type":"markdown","source":["---\n","## 1. 멀티 헤드 어텐션\n","우선 트랜스포머의 인코더의 첫번째 서브층인 멀티 헤드 어텐션층을 클래스로 구현합니다.\n","\n"],"metadata":{"id":"uFKq1NU_eG4E"}},{"cell_type":"code","source":["import tensorflow as tf"],"metadata":{"id":"mU56BTwdeUvL","executionInfo":{"status":"ok","timestamp":1672813847758,"user_tz":-540,"elapsed":3949,"user":{"displayName":"Jeong-Ho JEON (전정호)","userId":"09770030589626015137"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["class MultiHeadAttention(tf.keras.layers.Layer):\n","    def __init__(self, embedding_dim, num_heads=8):\n","        super(MultiHeadAttention, self).__init__()\n","        self.embedding_dim = embedding_dim # d_model\n","        self.num_heads = num_heads\n","\n","        assert embedding_dim % self.num_heads == 0\n","\n","        self.projection_dim = embedding_dim // num_heads\n","        self.query_dense = tf.keras.layers.Dense(embedding_dim)\n","        self.key_dense = tf.keras.layers.Dense(embedding_dim)\n","        self.value_dense = tf.keras.layers.Dense(embedding_dim)\n","        self.dense = tf.keras.layers.Dense(embedding_dim)\n","\n","    def scaled_dot_product_attention(self, query, key, value):\n","        matmul_qk = tf.matmul(query, key, transpose_b=True)\n","        depth = tf.cast(tf.shape(key)[-1], tf.float32)\n","        logits = matmul_qk / tf.math.sqrt(depth)\n","        attention_weights = tf.nn.softmax(logits, axis=-1)\n","        output = tf.matmul(attention_weights, value)\n","        return output, attention_weights\n","\n","    def split_heads(self, x, batch_size):\n","        x = tf.reshape(x, (batch_size, -1, self.num_heads, self.projection_dim))\n","        return tf.transpose(x, perm=[0, 2, 1, 3])\n","\n","    def call(self, inputs):\n","        # x.shape = [batch_size, seq_len, embedding_dim]\n","        batch_size = tf.shape(inputs)[0]\n","\n","        # (batch_size, seq_len, embedding_dim)\n","        query = self.query_dense(inputs)\n","        key = self.key_dense(inputs)\n","        value = self.value_dense(inputs)\n","\n","        # (batch_size, num_heads, seq_len, projection_dim)\n","        query = self.split_heads(query, batch_size)  \n","        key = self.split_heads(key, batch_size)\n","        value = self.split_heads(value, batch_size)\n","\n","        scaled_attention, _ = self.scaled_dot_product_attention(query, key, value)\n","        # (batch_size, seq_len, num_heads, projection_dim)\n","        scaled_attention = tf.transpose(scaled_attention, perm=[0, 2, 1, 3])  \n","\n","        # (batch_size, seq_len, embedding_dim)\n","        concat_attention = tf.reshape(scaled_attention, (batch_size, -1, self.embedding_dim))\n","        outputs = self.dense(concat_attention)\n","        return outputs"],"metadata":{"id":"g37zNn-MeXDp","executionInfo":{"status":"ok","timestamp":1672813851327,"user_tz":-540,"elapsed":552,"user":{"displayName":"Jeong-Ho JEON (전정호)","userId":"09770030589626015137"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["---\n","## 2. 인코더 설계하기\n"],"metadata":{"id":"CmAg_lFZedeU"}},{"cell_type":"markdown","source":["멀티 헤드 어텐션에 두번째 서브층인 포지션 와이즈 피드 포워드 신경망을 추가하여 인코더 클래스를 설계합니다."],"metadata":{"id":"acpVdTlHeknr"}},{"cell_type":"code","source":["class TransformerBlock(tf.keras.layers.Layer):\n","    def __init__(self, embedding_dim, num_heads, dff, rate=0.1):\n","        super(TransformerBlock, self).__init__()\n","        self.att = MultiHeadAttention(embedding_dim, num_heads)\n","        self.ffn = tf.keras.Sequential(\n","            [tf.keras.layers.Dense(dff, activation=\"relu\"),\n","             tf.keras.layers.Dense(embedding_dim),]\n","        )\n","        self.layernorm1 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n","        self.layernorm2 = tf.keras.layers.LayerNormalization(epsilon=1e-6)\n","        self.dropout1 = tf.keras.layers.Dropout(rate)\n","        self.dropout2 = tf.keras.layers.Dropout(rate)\n","\n","    def call(self, inputs, training):\n","        attn_output = self.att(inputs) # 첫번째 서브층 : 멀티 헤드 어텐션\n","        attn_output = self.dropout1(attn_output, training=training)\n","        out1 = self.layernorm1(inputs + attn_output) # Add & Norm\n","        ffn_output = self.ffn(out1) # 두번째 서브층 : 포지션 와이즈 피드 포워드 신경망\n","        ffn_output = self.dropout2(ffn_output, training=training)\n","        return self.layernorm2(out1 + ffn_output) # Add & Norm"],"metadata":{"id":"cwdnIhjhedE8","executionInfo":{"status":"ok","timestamp":1672813907948,"user_tz":-540,"elapsed":868,"user":{"displayName":"Jeong-Ho JEON (전정호)","userId":"09770030589626015137"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["---\n","## 3. 포지션 임베딩\n","앞서 트랜스포머를 설명할 때는 포지셔널 인코딩을 사용하였지만, 이번에는 위치 정보 자체를 학습을 하도록 하는 포지션 임베딩이라는 방법을 사용합니다. 이는 뒤에서 배우게 될 BERT에서 사용하는 방법이기도 합니다. 포지션 임베딩은 임베딩 층(Embedding layer)를 사용하되, 위치 벡터를 학습하도록 하므로 임베딩 층의 첫번째 인자로 단어 집합의 크기가 아니라 문장의 최대 길이를 넣어줍니다."],"metadata":{"id":"GkGNN9M6escz"}},{"cell_type":"code","source":["class TokenAndPositionEmbedding(tf.keras.layers.Layer):\n","    def __init__(self, max_len, vocab_size, embedding_dim):\n","        super(TokenAndPositionEmbedding, self).__init__()\n","        self.token_emb = tf.keras.layers.Embedding(vocab_size, embedding_dim)\n","        self.pos_emb = tf.keras.layers.Embedding(max_len, embedding_dim)\n","\n","    def call(self, x):\n","        max_len = tf.shape(x)[-1]\n","        positions = tf.range(start=0, limit=max_len, delta=1)\n","        positions = self.pos_emb(positions)\n","        x = self.token_emb(x)\n","        return x + positions"],"metadata":{"id":"FD3tyVGwea42","executionInfo":{"status":"ok","timestamp":1672813949593,"user_tz":-540,"elapsed":375,"user":{"displayName":"Jeong-Ho JEON (전정호)","userId":"09770030589626015137"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":["---\n","## 4. 데이터 로드 및 전처리"],"metadata":{"id":"sZa07YEqe1h0"}},{"cell_type":"code","source":["vocab_size = 20000  # 빈도수 상위 2만개의 단어만 사용\n","max_len = 200  # 문장의 최대 길이\n","\n","(X_train, y_train), (X_test, y_test) = tf.keras.datasets.imdb.load_data(num_words=vocab_size)\n","print('훈련용 리뷰 개수 : {}'.format(len(X_train)))\n","print('테스트용 리뷰 개수 : {}'.format(len(X_test)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3syeOW-Leyyg","executionInfo":{"status":"ok","timestamp":1672813982022,"user_tz":-540,"elapsed":6425,"user":{"displayName":"Jeong-Ho JEON (전정호)","userId":"09770030589626015137"}},"outputId":"3fb33b8a-f0c3-4cce-8ebf-40ef0e36cba1"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb.npz\n","17464789/17464789 [==============================] - 0s 0us/step\n","훈련용 리뷰 개수 : 25000\n","테스트용 리뷰 개수 : 25000\n"]}]},{"cell_type":"code","source":["X_train = tf.keras.preprocessing.sequence.pad_sequences(X_train, maxlen=max_len)\n","X_test = tf.keras.preprocessing.sequence.pad_sequences(X_test, maxlen=max_len)"],"metadata":{"id":"J-1lfThQe5Q6","executionInfo":{"status":"ok","timestamp":1672813992630,"user_tz":-540,"elapsed":1348,"user":{"displayName":"Jeong-Ho JEON (전정호)","userId":"09770030589626015137"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":["---\n","## 5. 트랜스포머를 이용한 IMDB 리뷰 분류"],"metadata":{"id":"e6ba3jnFe_Da"}},{"cell_type":"code","source":["embedding_dim = 32  # 각 단어의 임베딩 벡터의 차원\n","num_heads = 2  # 어텐션 헤드의 수\n","dff = 32  # 포지션 와이즈 피드 포워드 신경망의 은닉층의 크기\n","\n","inputs = tf.keras.layers.Input(shape=(max_len,))\n","embedding_layer = TokenAndPositionEmbedding(max_len, vocab_size, embedding_dim)\n","x = embedding_layer(inputs)\n","transformer_block = TransformerBlock(embedding_dim, num_heads, dff)\n","x = transformer_block(x)\n","x = tf.keras.layers.GlobalAveragePooling1D()(x)\n","x = tf.keras.layers.Dropout(0.1)(x)\n","x = tf.keras.layers.Dense(20, activation=\"relu\")(x)\n","x = tf.keras.layers.Dropout(0.1)(x)\n","outputs = tf.keras.layers.Dense(2, activation=\"softmax\")(x)\n","\n","model = tf.keras.Model(inputs=inputs, outputs=outputs)"],"metadata":{"id":"HIeP_PNue9HW","executionInfo":{"status":"ok","timestamp":1672814029488,"user_tz":-540,"elapsed":1413,"user":{"displayName":"Jeong-Ho JEON (전정호)","userId":"09770030589626015137"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZbPg7zC1fGGh","executionInfo":{"status":"ok","timestamp":1672814048090,"user_tz":-540,"elapsed":686,"user":{"displayName":"Jeong-Ho JEON (전정호)","userId":"09770030589626015137"}},"outputId":"6a0771fc-f680-4407-e2cc-a7b95e2d70ed"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_1 (InputLayer)        [(None, 200)]             0         \n","                                                                 \n"," token_and_position_embeddin  (None, 200, 32)          646400    \n"," g (TokenAndPositionEmbeddin                                     \n"," g)                                                              \n","                                                                 \n"," transformer_block (Transfor  (None, 200, 32)          6464      \n"," merBlock)                                                       \n","                                                                 \n"," global_average_pooling1d (G  (None, 32)               0         \n"," lobalAveragePooling1D)                                          \n","                                                                 \n"," dropout_2 (Dropout)         (None, 32)                0         \n","                                                                 \n"," dense_6 (Dense)             (None, 20)                660       \n","                                                                 \n"," dropout_3 (Dropout)         (None, 20)                0         \n","                                                                 \n"," dense_7 (Dense)             (None, 2)                 42        \n","                                                                 \n","=================================================================\n","Total params: 653,566\n","Trainable params: 653,566\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["model.compile(\"adam\", \"sparse_categorical_crossentropy\", metrics=[\"accuracy\"])"],"metadata":{"id":"3dneRhV9fKwH","executionInfo":{"status":"ok","timestamp":1672814083460,"user_tz":-540,"elapsed":545,"user":{"displayName":"Jeong-Ho JEON (전정호)","userId":"09770030589626015137"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["%%time\n","\n","# Epoch 2/2\n","# 782/782 [==============================] - 111s 142ms/step - loss: 0.2002 - accuracy: 0.9222 - val_loss: 0.3114 - val_accuracy: 0.8710\n","# CPU times: user 5min 27s, sys: 19.1 s, total: 5min 46s\n","# Wall time: 3min 41s\n","history = model.fit(X_train, y_train, batch_size=32, epochs=2, validation_data=(X_test, y_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gQ1Qg-DgfPP1","executionInfo":{"status":"ok","timestamp":1672814310250,"user_tz":-540,"elapsed":222173,"user":{"displayName":"Jeong-Ho JEON (전정호)","userId":"09770030589626015137"}},"outputId":"54bf4a92-fd17-4eb9-cc3d-9a0e76f6d696"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/2\n","782/782 [==============================] - 111s 138ms/step - loss: 0.3906 - accuracy: 0.8135 - val_loss: 0.3090 - val_accuracy: 0.8647\n","Epoch 2/2\n","782/782 [==============================] - 111s 142ms/step - loss: 0.2002 - accuracy: 0.9222 - val_loss: 0.3114 - val_accuracy: 0.8710\n","CPU times: user 5min 27s, sys: 19.1 s, total: 5min 46s\n","Wall time: 3min 41s\n"]}]},{"cell_type":"code","source":["print(\"테스트 정확도: %.4f\" % (model.evaluate(X_test, y_test)[1]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ww8EXHNUfUv5","executionInfo":{"status":"ok","timestamp":1672814351303,"user_tz":-540,"elapsed":41071,"user":{"displayName":"Jeong-Ho JEON (전정호)","userId":"09770030589626015137"}},"outputId":"a939f58c-b881-4cb9-88cd-59d5fd78e425"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["782/782 [==============================] - 26s 34ms/step - loss: 0.3114 - accuracy: 0.8710\n","테스트 정확도: 0.8710\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"OiEGXCl0fVuj"},"execution_count":null,"outputs":[]}]}